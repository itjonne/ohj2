package bongari.test;
// Generated by ComTest BEGIN
import java.util.*;
import java.io.File;
import static org.junit.Assert.*;
import org.junit.*;
import bongari.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.11.14 18:39:36 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class JasenetTest {



  // Generated by ComTest BEGIN
  /** testLisaa32 */
  @Test
  public void testLisaa32() {    // Jasenet: 32
    Jasenet jasenet = new Jasenet(); 
    Jasen testi = new Jasen(); 
    jasenet.lisaa(testi); 
    assertEquals("From: Jasenet line: 36", 1, jasenet.getLkm()); 
    Jasen testi2 = new Jasen(); 
    Jasen testi3 = new Jasen(); 
    Jasen testi4 = new Jasen(); 
    Jasen testi5 = new Jasen(); 
    Jasen testi6 = new Jasen(); 
    jasenet.lisaa(testi2); jasenet.lisaa(testi3); jasenet.lisaa(testi4); jasenet.lisaa(testi5); 
    try {
    jasenet.lisaa(testi6); 
    fail("Jasenet: 43 Did not throw Error");
    } catch(Error _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista63 
   * @throws ExceptionHandler when error
   */
  @Test
  public void testPoista63() throws ExceptionHandler {    // Jasenet: 63
    Jasenet jasenet = new Jasenet(); 
    Jasen jasen = new Jasen(); 
    jasen.parse("1|Roope|Ankka"); 
    jasenet.lisaa(jasen); 
    assertEquals("From: Jasenet line: 69", 1, jasenet.getLkm()); 
    Jasen jasen2 = new Jasen(); 
    jasen2.parse("2|Aku|Ankka"); 
    jasenet.lisaa(jasen2); 
    assertEquals("From: Jasenet line: 73", 2, jasenet.getLkm()); 
    jasenet.poista(1); 
    assertEquals("From: Jasenet line: 75", 1, jasenet.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testMuokkaa94 
   * @throws ExceptionHandler when error
   */
  @Test
  public void testMuokkaa94() throws ExceptionHandler {    // Jasenet: 94
    Jasenet jasenet = new Jasenet(); 
    Jasen jasen = new Jasen(); 
    jasen.parse("1|Repe|Sorsa"); 
    jasenet.lisaa(jasen); 
    assertEquals("From: Jasenet line: 100", "Sorsa", jasenet.annaId(1).getSukunimi()); 
    Jasen muokattuJasen = new Jasen(); 
    muokattuJasen.parse("1|Repe|Ankka"); 
    jasenet.muokkaa(muokattuJasen); 
    assertEquals("From: Jasenet line: 104", "Ankka", jasenet.annaId(1).getSukunimi()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsi122 
   * @throws ExceptionHandler when error
   */
  @Test
  public void testEtsi122() throws ExceptionHandler {    // Jasenet: 122
    Jasenet jasenet = new Jasenet(); 
    Jasen jasen = new Jasen(); 
    jasen.parse("1|Aku|Ankka"); 
    Jasen jasen2 = new Jasen(); 
    jasen2.parse("2|Roope|Ankka"); 
    jasenet.lisaa(jasen); jasenet.lisaa(jasen2); 
    List<Jasen> loydetyt = jasenet.etsi("Ankka"); 
    assertEquals("From: Jasenet line: 132", 2, loydetyt.size()); 
    List<Jasen> loydetyt2 = jasenet.etsi("Ank"); 
    assertEquals("From: Jasenet line: 134", 2, loydetyt2.size()); 
    List<Jasen> loydetyt3 = jasenet.etsi("Pekka"); 
    assertEquals("From: Jasenet line: 136", 0, loydetyt3.size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsiJasenenIndeksi161 
   * @throws ExceptionHandler when error
   */
  @Test
  public void testEtsiJasenenIndeksi161() throws ExceptionHandler {    // Jasenet: 161
    Jasenet jasenet = new Jasenet(); 
    Jasen jasen = new Jasen(); 
    jasen.parse("1|Repe|Sorsa"); 
    Jasen jasen2 = new Jasen(); 
    jasen2.parse("2|Aku|Ankka"); 
    jasenet.lisaa(jasen); jasenet.lisaa(jasen2); 
    int indeksi = jasenet.etsiJasenenIndeksi(1); 
    assertEquals("From: Jasenet line: 170", 0, indeksi); 
    int indeksi2 = jasenet.etsiJasenenIndeksi(2); 
    assertEquals("From: Jasenet line: 172", 1, indeksi2); 
    int indeksiEiLoydy = jasenet.etsiJasenenIndeksi(3); 
    assertEquals("From: Jasenet line: 174", -1, indeksiEiLoydy); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetLkm188 */
  @Test
  public void testGetLkm188() {    // Jasenet: 188
    Jasenet jasenet = new Jasenet(); 
    Jasen jasen = new Jasen(); 
    jasenet.lisaa(jasen); 
    assertEquals("From: Jasenet line: 192", 1, jasenet.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnna204 */
  @Test
  public void testAnna204() {    // Jasenet: 204
    Jasenet jasenet = new Jasenet(); 
    Jasen jasen1 = new Jasen(); 
    Jasen jasen2 = new Jasen(); 
    jasenet.lisaa(jasen1); jasenet.lisaa(jasen2); 
    assertEquals("From: Jasenet line: 209", jasen1, jasenet.anna(0)); 
    assertEquals("From: Jasenet line: 210", jasen2, jasenet.anna(1)); 
    try {
    jasenet.anna(3); 
    fail("Jasenet: 211 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnnaId224 
   * @throws ExceptionHandler when error
   */
  @Test
  public void testAnnaId224() throws ExceptionHandler {    // Jasenet: 224
    Jasenet jasenet = new Jasenet(); 
    Jasen jasen = new Jasen(); 
    jasen.parse("1|Roope|Ankka"); 
    Jasen jasen2 = new Jasen(); 
    jasen2.parse("2|Repe|Sorsa"); 
    jasenet.lisaa(jasen); jasenet.lisaa(jasen2); 
    Jasen loydetty = jasenet.annaId(1); 
    assertEquals("From: Jasenet line: 233", "Roope", loydetty.getEtunimi()); 
    Jasen loydetty2 = jasenet.annaId(4); 
    assertEquals("From: Jasenet line: 235", null, loydetty2); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta248 
   * @throws ExceptionHandler when error
   */
  @Test
  public void testLueTiedostosta248() throws ExceptionHandler {    // Jasenet: 248
    Jasenet jasenet = new Jasenet(); 
    String hakemisto = "data/testikerho/"; 
    try {
    jasenet.lueTiedostosta(hakemisto + "jasent"); 
    fail("Jasenet: 254 Did not throw ExceptionHandler");
    } catch(ExceptionHandler _e_){ _e_.getMessage(); }
    jasenet = new Jasenet();  // Poistetaan vanhat luomalla uusi
    jasenet.lueTiedostosta(hakemisto + "jasenet");  // johon ladataan tiedot tiedostosta.
    Jasen jasen = jasenet.annaId(1); 
    assertEquals("From: Jasenet line: 258", "Testi", jasen.getEtunimi()); 
    assertEquals("From: Jasenet line: 259", "Testaaja", jasen.getSukunimi()); 
    assertEquals("From: Jasenet line: 260", 1, jasen.getJasenId()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnnaJasenet383 
   * @throws ExceptionHandler when error
   */
  @Test
  public void testAnnaJasenet383() throws ExceptionHandler {    // Jasenet: 383
    Jasenet jasenet = new Jasenet(); 
    Jasen jasen = new Jasen(); 
    jasen.parse("1|Aku|Ankka"); 
    Jasen jasen2 = new Jasen(); 
    jasen2.parse("2|Roope|Ankka"); 
    jasenet.lisaa(jasen); jasenet.lisaa(jasen2); 
    assertEquals("From: Jasenet line: 391", 2, jasenet.annaJasenet().size()); 
  } // Generated by ComTest END
}